import boto3
import pandas as pd
from io import StringIO, BytesIO
import os
from typing import List, Dict, Union

# AWS S3 configuration
s3 = boto3.client('s3')
trusted_bucket = 'bdm.trusted.zone'
exploitation_bucket = 'bdm.exploitation.zone'
trusted_csv_prefix = 'clean_data/csv/'
exploitation_prefix = 'exploitation_zone/'

# --- Continent Mappings ---
continent_mapping = {
    'afghanistan': 'Asia',
    'albania': 'Europe',
    'algeria': 'Africa',
    'american samoa': 'Oceania',
    'andean latin america': 'South America',
    'andorra': 'Europe',
    'angola': 'Africa',
    'antigua and barbuda': 'North America',
    'argentina': 'South America',
    'armenia': 'Asia',
    'australia': 'Oceania',
    'austria': 'Europe',
    'azerbaijan': 'Asia',
    'bahamas': 'North America',
    'bahrain': 'Asia',
    'bangladesh': 'Asia',
    'barbados': 'North America',
    'belarus': 'Europe',
    'belgium': 'Europe',
    'belize': 'North America',
    'benin': 'Africa',
    'bermuda': 'North America',
    'bhutan': 'Asia',
    'bolivia': 'South America',
    'bosnia and herzegovina': 'Europe',
    'botswana': 'Africa',
    'brazil': 'South America',
    'brunei': 'Asia',
    'bulgaria': 'Europe',
    'burkina faso': 'Africa',
    'burundi': 'Africa',
    'cambodia': 'Asia',
    'cameroon': 'Africa',
    'canada': 'North America',
    'cape verde': 'Africa',
    'caribbean': 'North America',
    'central african republic': 'Africa',
    'central asia': 'Asia',
    'central europe': 'Europe',
    'central europe, eastern europe, and central asia': 'Europe',
    'central latin america': 'South America',
    'central sub-saharan africa': 'Africa',
    'chad': 'Africa',
    'chile': 'South America',
    'china': 'Asia',
    'colombia': 'South America',
    'comoros': 'Africa',
    'congo': 'Africa',
    'costa rica': 'North America',
    "cote d'ivoire": 'Africa',
    'croatia': 'Europe',
    'cuba': 'North America',
    'cyprus': 'Europe',
    'czech republic': 'Europe',
    'democratic republic of congo': 'Africa',
    'denmark': 'Europe',
    'djibouti': 'Africa',
    'dominica': 'North America',
    'dominican republic': 'North America',
    'east asia': 'Asia',
    'eastern europe': 'Europe',
    'eastern sub-saharan africa': 'Africa',
    'ecuador': 'South America',
    'egypt': 'Africa',
    'el salvador': 'North America',
    'england': 'Europe',
    'equatorial guinea': 'Africa',
    'eritrea': 'Africa',
    'estonia': 'Europe',
    'ethiopia': 'Africa',
    'fiji': 'Oceania',
    'finland': 'Europe',
    'france': 'Europe',
    'gabon': 'Africa',
    'gambia': 'Africa',
    'georgia': 'Asia',
    'germany': 'Europe',
    'ghana': 'Africa',
    'greece': 'Europe',
    'greenland': 'North America',
    'grenada': 'North America',
    'guam': 'Oceania',
    'guatemala': 'North America',
    'guinea': 'Africa',
    'guinea-bissau': 'Africa',
    'guyana': 'South America',
    'haiti': 'North America',
    'honduras': 'North America',
    'hungary': 'Europe',
    'iceland': 'Europe',
    'india': 'Asia',
    'indonesia': 'Asia',
    'iran': 'Asia',
    'iraq': 'Asia',
    'ireland': 'Europe',
    'israel': 'Asia',
    'italy': 'Europe',
    'jamaica': 'North America',
    'japan': 'Asia',
    'jordan': 'Asia',
    'kazakhstan': 'Asia',
    'kenya': 'Africa',
    'kiribati': 'Oceania',
    'kuwait': 'Asia',
    'kyrgyzstan': 'Asia',
    'laos': 'Asia',
    'latin america and caribbean': 'South America',
    'latvia': 'Europe',
    'lebanon': 'Asia',
    'lesotho': 'Africa',
    'liberia': 'Africa',
    'libya': 'Africa',
    'lithuania': 'Europe',
    'luxembourg': 'Europe',
    'macedonia': 'Europe',
    'madagascar': 'Africa',
    'malawi': 'Africa',
    'malaysia': 'Asia',
    'maldives': 'Asia',
    'mali': 'Africa',
    'malta': 'Europe',
    'marshall islands': 'Oceania',
    'mauritania': 'Africa',
    'mauritius': 'Africa',
    'mexico': 'North America',
    'micronesia (country)': 'Oceania',
    'moldova': 'Europe',
    'mongolia': 'Asia',
    'montenegro': 'Europe',
    'morocco': 'Africa',
    'mozambique': 'Africa',
    'myanmar': 'Asia',
    'namibia': 'Africa',
    'nepal': 'Asia',
    'netherlands': 'Europe',
    'new zealand': 'Oceania',
    'nicaragua': 'North America',
    'niger': 'Africa',
    'nigeria': 'Africa',
    'north africa and middle east': 'Africa',
    'north america': 'North America',
    'north korea': 'Asia',
    'northern ireland': 'Europe',
    'northern mariana islands': 'Oceania',
    'norway': 'Europe',
    'oceania': 'Oceania',
    'oman': 'Asia',
    'pakistan': 'Asia',
    'palestine': 'Asia',
    'panama': 'North America',
    'papua new guinea': 'Oceania',
    'paraguay': 'South America',
    'peru': 'South America',
    'philippines': 'Asia',
    'poland': 'Europe',
    'portugal': 'Europe',
    'puerto rico': 'North America',
    'qatar': 'Asia',
    'romania': 'Europe',
    'russia': 'Europe',
    'rwanda': 'Africa',
    'saint lucia': 'North America',
    'saint vincent and the grenadines': 'North America',
    'samoa': 'Oceania',
    'sao tome and principe': 'Africa',
    'saudi arabia': 'Asia',
    'scotland': 'Europe',
    'senegal': 'Africa',
    'serbia': 'Europe',
    'seychelles': 'Africa',
    'sierra leone': 'Africa',
    'singapore': 'Asia',
    'slovakia': 'Europe',
    'slovenia': 'Europe',
    'south africa': 'Africa',
    'south korea': 'Asia',
    'spain': 'Europe',
    'sri lanka': 'Asia',
    'sudan': 'Africa',
    'sweden': 'Europe',
    'switzerland': 'Europe',
    'syria': 'Asia',
    'taiwan': 'Asia',
    'tajikistan': 'Asia',
    'tanzania': 'Africa',
    'thailand': 'Asia',
    'timor-leste': 'Asia',
    'togo': 'Africa',
    'tonga': 'Oceania',
    'trinidad and tobago': 'North America',
    'tunisia': 'Africa',
    'turkey': 'Asia',
    'turkmenistan': 'Asia',
    'uganda': 'Africa',
    'ukraine': 'Europe',
    'united arab emirates': 'Asia',
    'united kingdom': 'Europe',
    'united states': 'North America',
    'uruguay': 'South America',
    'uzbekistan': 'Asia',
    'vanuatu': 'Oceania',
    'venezuela': 'South America',
    'vietnam': 'Asia',
    'yemen': 'Asia',
    'zambia': 'Africa',
    'zimbabwe': 'Africa',
    'alabama': 'North America',
    'alaska': 'North America',
    'arizona': 'North America',
    'arkansas': 'North America',
    'california': 'North America',
    'colorado': 'North America',
    'connecticut': 'North America',
    'delaware': 'North America',
    'district of columbia': 'North America',
    'florida': 'North America',
    'georgia': 'North America',
    'hawaii': 'North America',
    'idaho': 'North America',
    'illinois': 'North America',
    'indiana': 'North America',
    'iowa': 'North America',
    'kansas': 'North America',
    'kentucky': 'North America',
    'louisiana': 'North America',
    'maine': 'North America',
    'maryland': 'North America',
    'massachusetts': 'North America',
    'michigan': 'North America',
    'minnesota': 'North America',
    'mississippi': 'North America',
    'missouri': 'North America',
    'montana': 'North America',
    'nebraska': 'North America',
    'nevada': 'North America',
    'new hampshire': 'North America',
    'new jersey': 'North America',
    'new mexico': 'North America',
    'new york': 'North America',
    'north carolina': 'North America',
    'north dakota': 'North America',
    'ohio': 'North America',
    'oklahoma': 'North America',
    'oregon': 'North America',
    'pennsylvania': 'North America',
    'rhode island': 'North America',
    'south carolina': 'North America',
    'south dakota': 'North America',
    'tennessee': 'North America',
    'texas': 'North America',
    'utah': 'North America',
    'vermont': 'North America',
    'virginia': 'North America',
    'washington': 'North America',
    'west virginia': 'North America',
    'wisconsin': 'North America',
    'wyoming': 'North America'
}

def get_continent(country_name: str) -> str:
    """
    Returns the continent for a given country name.
    """
    return continent_mapping.get(country_name, 'Unknown')


def extract_year(df: pd.DataFrame) -> Union[pd.Series, None]:
    """
    Extracts the year from 'Year', 'Period', 'Start', or 'End' columns of a DataFrame.

    Args:
        df: The Pandas DataFrame.

    Returns:
        A Pandas Series containing the year, or None if no year can be extracted.
    """
    if 'Year' in df.columns:
        return df['Year']
    elif 'Period' in df.columns:
        return df['Period'].astype(str).str.extract(r'(\d{4})').astype(int).iloc[:, 0]
    elif 'Start' in df.columns:
        return pd.to_datetime(df['Start'], errors='coerce', dayfirst=True).dt.year
    elif 'End' in df.columns:
        return pd.to_datetime(df['End'], errors='coerce', dayfirst=True).dt.year
    else:
        return None

def process_data_to_exploitation(trusted_bucket: str, exploitation_bucket: str, trusted_prefix: str, exploitation_prefix: str) -> None:
    """
    Processes data from the trusted zone, aggregates it, partitions it, and saves it to the exploitation zone.
    """
    try:
        # List objects in the trusted zone
        response = s3.list_objects_v2(Bucket=trusted_bucket, Prefix=trusted_prefix)
        if 'Contents' not in response:
            print(f"No files found in trusted zone: s3://{trusted_bucket}/{trusted_prefix}")
            return

        for obj in response['Contents']:
            key = obj['Key']
            if not key.endswith('.csv'):
                continue

            print(f"Processing: {key}")
            try:
                # 1. Read CSV from trusted zone
                file_obj = s3.get_object(Bucket=trusted_bucket, Key=key)
                csv_content = file_obj['Body'].read().decode('utf-8')
                df = pd.read_csv(StringIO(csv_content))
                filename = os.path.basename(key)

                # 2. Geographic Partitioning (Do this early)
                if filename == 'gist_mental_health_20250404_203840.csv':
                    if 'State' in df.columns:
                        print(f"Sample of 'State' column in {filename}:")
                        print(df['State'].head())
                        df['Continent'] = df['State'].apply(get_continent)
                    else:
                        df['Continent'] = 'Unknown'
                        print(f"Warning: 'State' column not found. Continent set to 'Unknown' for {filename}")
                elif filename == 'gist_mental_health_disorders_unemployment_and_suicides_20250404_203929.csv':
                    if 'Entity' in df.columns:
                        print(f"Sample of 'Entity' column in {filename}:")
                        print(df['Entity'].head())
                        df['Continent'] = df['Entity'].apply(get_continent)
                    elif 'Code' in df.columns:
                        print(f"Sample of 'Code' column in {filename}:")
                        print(df['Code'].head())
                        df['Continent'] = df['Code'].apply(get_continent)
                    else:
                        df['Continent'] = 'Unknown'
                        print(f"Warning: Neither 'Entity' nor 'Code' column is available. Continent set to 'Unknown' for {filename}")
                else:
                    df['Continent'] = 'Unknown'
                    print(f"Warning: No specific continent logic for {filename}. Continent set to 'Unknown'.")

                # 3. Extract Year (before file-specific transformations where 'Year' might be modified)
                df['Year'] = extract_year(df)
                if df['Year'].isnull().all():
                    print(f"Error: Could not extract year from any date column for {filename}. Skipping file.")
                    continue
                df['Year'] = df['Year'].astype('Int64') # Convert to integer after extraction

                # 4. File-Specific Transformation
                if filename == 'gist_mental_health_disorders_unemployment_and_suicides_20250404_203929.csv':
                    print("- Applying mental health disorders transformation")
                    numeric_cols = ['AlcoholUseDisorders', 'DrugUseDisorders', 'DepressiveDisorders',
                                    'BipolarDisorder', 'AnxietyDisorders', 'EatingDisorders',
                                    'Schizophrenia', 'TotalPercentageOfPopulation', 'Unemployment',
                                    'SuicideDeathsRate']
                    if 'TotalPercentageOfPopulation' in df.columns:
                        df['TotalPercentageOfPopulation'] = df['TotalPercentageOfPopulation'].clip(0, 100)
                    aggregated_df = df.groupby(['Entity', 'Continent', 'Year']).agg(
                        TotalSuicideDeathsRate=('SuicideDeathsRate', 'sum'),
                        AlcoholUseDisorders_mean=('AlcoholUseDisorders', 'mean'),
                        DrugUseDisorders_mean=('DrugUseDisorders', 'mean'),
                        DepressiveDisorders_mean=('DepressiveDisorders', 'mean'),
                        BipolarDisorder_mean=('BipolarDisorder', 'mean'),
                        AnxietyDisorders_mean=('AnxietyDisorders', 'mean'),
                        EatingDisorders_mean=('EatingDisorders', 'mean'),
                        Schizophrenia_mean=('Schizophrenia', 'mean'),
                        TotalPercentageOfPopulation_mean=('TotalPercentageOfPopulation', 'mean'),
                        Unemployment_mean=('Unemployment', 'mean'),
                        RecordCount=('Entity', 'count')
                    ).reset_index()
                elif filename == 'gist_mental_health_20250404_203840.csv':
                    print("- Applying therapy data transformation")
                    date_cols = ['Start', 'End']
                    aggregated_df = df.copy()
                else:
                    print(f"- No specific transformation defined for: {filename}. Applying only basic transformation.")
                    aggregated_df = df.copy()

                # 5. Partition and Save as CSV
                for continent in aggregated_df['Continent'].unique():
                    for year in aggregated_df['Year'].unique():
                        partitioned_df = aggregated_df[(aggregated_df['Continent'] == continent) & (aggregated_df['Year'] == year)]
                        if not partitioned_df.empty:
                            new_key = f"{exploitation_prefix}Continent={continent}/Year={year}/{os.path.splitext(os.path.basename(key))[0]}.csv"
                            print(f"Saving to: s3://{exploitation_bucket}/{new_key}")
                            buffer = BytesIO()
                            partitioned_df.to_csv(buffer, index=False, encoding='utf-8')
                            buffer.seek(0)
                            s3.put_object(
                                Bucket=exploitation_bucket,
                                Key=new_key,
                                Body=buffer.getvalue(),
                            )
                        else:
                            print(f"Skipping empty partition: Continent={continent}, Year={year}")

                print(f"Successfully processed and saved data from {key} to exploitation zone.")

            except Exception as e:
                print(f"Error processing {key}: {e}")
    except Exception as e:
        print(f"Error: {e}")

if __name__ == "__main__":
    process_data_to_exploitation(
        trusted_bucket=trusted_bucket,
        exploitation_bucket=exploitation_bucket,
        trusted_prefix=trusted_csv_prefix,
        exploitation_prefix=exploitation_prefix,
    )
    print("Data processing to exploitation zone complete.")